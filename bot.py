from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

from handlers.video_handler import VideoHandler
from states.states import VideoProcessing
from services.File_Manager import FileManager
from services.chunk_uploader import ChunkUploader


from config.config import BOT_TOKEN, setup_logging
import logging
import os
import asyncio

logger = setup_logging(__name__)

class VideoBot:
    def __init__(self):
        self.storage = MemoryStorage()
        self.bot = None
        self.dp = None
        self.video_handler = VideoHandler()
        self.file_manager = FileManager()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        if not self.bot:
            self.bot = Bot(token=BOT_TOKEN)
            
        if not self.dp:
            self.dp = Dispatcher(storage=self.storage)
            self.register_handlers()
            await self.video_handler.set_bot(self.bot)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            os.makedirs("downloads", exist_ok=True)
            os.makedirs("models", exist_ok=True)
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            cleanup_task = asyncio.create_task(self.video_handler.periodic_cleanup())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

    # async def _create_session(self):
    #     """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    #     return ClientSession(
    #         timeout=ClientSession.timeout_class(
    #             connect=30,
    #             sock_read=30,
    #             sock_connect=30
    #         )
    #     )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.dp.message(Command(commands=['start', 'help']))
        async def send_welcome(message: types.Message, state: FSMContext):
            welcome_text = """
        üé• –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –Ω–∏—Ö —Ç–µ–∫—Å—Ç–∞.

        –ß—Ç–æ —è —É–º–µ—é:
        - –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube, Instagram –∏ Kuaishou
        - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–µ—á—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö
        - –û–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ (/tts)
        
        –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É
        2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        - üì• –°–∫–∞—á–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ
        - üéØ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å - –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ
        3. –î–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
        /tts –í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
        - YouTube
        - Instagram
        - Kuaishou
            """
            await message.reply(welcome_text)
            await state.set_state(VideoProcessing.WAITING_FOR_VIDEO)

        @self.dp.message(StateFilter(VideoProcessing.WAITING_FOR_SPEED_COEFFICIENT))
        async def speed_coefficient_handler(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
            logger.info("üî•üî•üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ó–í–ê–ù!")  # –í–†–ï–ú–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            await self.video_handler.handle_speed_coefficient_input(message, state)

        @self.dp.message(lambda m: m.text and any(x in m.text.lower() for x in ['youtube.com', 'youtu.be', 'instagram.com', 'kuaishou.com', 'pin.it', 'pinterest.com']))
        async def url_handler(message: types.Message, state: FSMContext):
            if message.from_user.id in self.video_handler.active_users:
                await message.reply("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                return
            await self.video_handler.process_url(message, state)

        @self.dp.message(lambda m: m.text and any(x in m.text.lower() for x in ['xiaohongshu.com', 'xhslink.com']))
        async def rednote_handler(message: types.Message, state: FSMContext):
            if message.from_user.id in self.video_handler.active_users:
                await message.reply("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                return
            await self.video_handler.process_url(message, state)

        @self.dp.message(lambda m: m.content_type == 'video')
        async def video_handler(message: types.Message, state: FSMContext):
            if message.from_user.id in self.video_handler.active_users:
                await message.reply("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                return
            await self.video_handler.process_video(message, state)

        @self.dp.callback_query(lambda c: c.data and c.data.startswith('action_'))
        async def action_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
            await self.video_handler.handle_action_selection(callback_query, state)

        @self.dp.callback_query(lambda c: c.data and c.data.startswith('lang_'))
        async def language_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
            await self.video_handler.handle_language_selection(callback_query, state)

        @self.dp.message(Command(commands=['urlbase']))
        async def url_base_command(message: types.Message):
            try:
                history = self.video_handler.db.get_all_history(30)
                
                if not history:
                    await message.reply("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
                    return
                    
                response = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL:\n\n"
                for entry in history:
                    username, url, status, error, timestamp = entry
                    status_emoji = "‚úÖ" if status == "success" else "‚ùå"
                    
                    entry_text = f"{status_emoji} @{username}\n"
                    entry_text += f"üîó {url}\n"
                    entry_text += f"üìÖ {timestamp}\n"
                    
                    if error:
                        entry_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}\n"
                        
                    entry_text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    
                    if len(response + entry_text) > 4000:
                        await message.reply(response)
                        response = entry_text
                    else:
                        response += entry_text
                
                if response:
                    await message.reply(response)
                    
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
                logger.error(error_msg)
                await message.reply(error_msg)

        

        @self.dp.message(Command(commands=['tts']))
        async def tts_command(message: types.Message, state: FSMContext):
            await self.video_handler.handle_tts_command(message, state)

        @self.dp.callback_query(lambda c: c.data and c.data.startswith('voice_'))
        async def voice_callback_handler(callback_query: types.CallbackQuery, state: FSMContext):
            await self.video_handler.handle_voice_selection(callback_query, state)

        @self.dp.message(lambda m: m.content_type == 'audio')
        async def audio_handler(message: types.Message, state: FSMContext):
            await self.video_handler.process_audio(message, state)

        @self.dp.callback_query(lambda c: c.data and (c.data == 'audio_silence' or c.data == 'audio_recognize'))
        async def audio_action_handler(callback_query: types.CallbackQuery, state: FSMContext):
            await self.video_handler.handle_audio_action(callback_query, state)

        

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @self.dp.errors()
        async def error_handler(event: types.ErrorEvent):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
            try:
                update = event.update
                exception = event.exception
                
                if isinstance(update, types.Message):
                    user_id = update.from_user.id
                    self.video_handler.active_users.discard(user_id)
                    await update.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                
                logger.error(f"Update: {update}\nError: {exception}")
            except Exception as e:
                logger.error(f"Error in error handler: {e}")

    async def _periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        while True:
            try:
                await asyncio.sleep(3600)  # –†–∞–∑ –≤ —á–∞—Å
                logger.info("Starting periodic cleanup")
                await self.video_handler.cleanup_active_users()  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤
                logger.info("Periodic cleanup completed")
            except Exception as e:
                logger.error(f"Error in periodic cleanup: {e}")

    async def stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await self.file_manager.cleanup_on_shutdown()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤–∏–¥–µ–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞
            await self.video_handler.close_session()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if hasattr(self.bot, 'session'):
                await self.bot.session.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            if self.video_handler.app:
                await self.video_handler.app.stop()
                
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

