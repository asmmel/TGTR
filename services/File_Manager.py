from typing import Set, Optional
import os
import logging
import time
import asyncio
from datetime import datetime, timedelta
from config.config import setup_logging

logger = setup_logging(__name__)

class FileManager:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(FileManager, cls).__new__(cls)
            cls._instance.initialize()
        return cls._instance
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        try:
            self.active_files = set()
            self.downloads_dir = "downloads"
            self.cleanup_threshold = 3600  # 1 —á–∞—Å
            os.makedirs(self.downloads_dir, exist_ok=True)
            logger.info("FileManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FileManager: {e}")
            raise

    def register_file(self, filepath: str) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if filepath:
            self.active_files.add(os.path.abspath(filepath))
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {filepath}")
    
    def safe_register_file(self, file_path: str) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        if file_path and os.path.exists(file_path):
            self.register_file(file_path)  # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ—Ç–æ–¥—É —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            
    def unregister_file(self, filepath: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if filepath:
            abs_path = os.path.abspath(filepath)
            self.active_files.discard(abs_path)
            logger.info(f"–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {filepath}")
                            
    def cleanup_file(self, filepath: str) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not filepath:
            return

        abs_path = os.path.abspath(filepath)
        if not os.path.exists(abs_path):
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {abs_path}")
            return

        logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {abs_path}")
        
        try:
            os.remove(abs_path)
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω: {abs_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {abs_path}: {e}")
            
    async def cleanup_old_files(self) -> None:
        current_time = time.time()
        for filename in os.listdir(self.downloads_dir):
            filepath = os.path.join(self.downloads_dir, filename)
            if os.path.abspath(filepath) in self.active_files:  # üõ°Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
                continue
            if (current_time - os.path.getmtime(filepath)) > self.cleanup_threshold:
                self.cleanup_file(filepath)
                
    async def start_cleanup_task(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        while True:
            await self.cleanup_old_files()
            await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            
    def get_active_files(self) -> Set[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        return self.active_files.copy()
    
    def file_exists(self, filepath: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        return filepath and os.path.exists(filepath)
        
    async def cleanup_on_shutdown(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
        try:
            active_files = self.get_active_files()
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ {len(active_files)} —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏")
            for file_path in active_files:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª –≤–º–µ—Å—Ç–æ cleanup_files
                self.cleanup_file(file_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")

        