# services/chunk_uploader.py
import os
import logging
import aiohttp
import aiofiles
import asyncio
import time
from typing import Optional, Dict, Callable, Any
from config.config import BOT_TOKEN, setup_logging

logger = setup_logging(__name__)

class ChunkUploader:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Telegram –ø–æ —á–∞—Å—Ç—è–º"""
    
    def __init__(self, 
                 base_url: str = "http://localhost:8081",
                 chunk_size: int = 8 * 1024 * 1024,  # 8MB
                 max_retries: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            base_url: URL –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Telegram
            chunk_size: –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–π—Ç–∞—Ö
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        """
        self.base_url = base_url
        self.api_endpoint = f"{base_url}/bot{BOT_TOKEN}"
        self.chunk_size = chunk_size
        self.max_retries = max_retries
        self.session = None
        
    async def ensure_session(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞"""
        if not self.session:
            self.session = aiohttp.ClientSession(
                base_url=self.base_url,
                timeout=aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
            
    async def _exponential_backoff(self, attempt: int) -> float:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ—Å—Ç–æ–º"""
        delay = min(2 ** attempt, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        jitter = (0.5 * delay) * (2 * (0.5 - (time.time() % 1)))  # ¬±25% —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        final_delay = delay + jitter
        return max(1, final_delay)
            
    async def send_large_video(self, 
                              chat_id: int, 
                              video_path: str, 
                              caption: Optional[str] = None,
                              progress_callback: Optional[Callable[[str], Any]] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç—è–º —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä API
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ
            progress_callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not os.path.exists(video_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return False
            
        file_size = os.path.getsize(video_path)
        file_name = os.path.basename(video_path)
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ {file_name} —Ä–∞–∑–º–µ—Ä–æ–º {file_size/(1024*1024):.2f} MB")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è API
        await self.ensure_session()
            
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        # –¥–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 50MB
        if file_size < 50 * 1024 * 1024:
            try:
                if progress_callback:
                    await progress_callback(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é ({file_size/(1024*1024):.1f} MB)...")
                    
                form = aiohttp.FormData()
                form.add_field('chat_id', str(chat_id))
                if caption:
                    form.add_field('caption', caption)
                    
                async with aiofiles.open(video_path, 'rb') as f:
                    form.add_field('video', 
                                  await f.read(),
                                  filename=file_name,
                                  content_type='video/mp4')
                                  
                async with self.session.post(
                    f"{self.api_endpoint}/sendVideo",
                    data=form,
                    timeout=aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                ) as response:
                    if response.status == 200:
                        logger.info(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
                        return True
                    else:
                        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {response.status}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞–Ω–∫–∞–º")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ —á–∞—Å—Ç—è–º
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ —á–∞—Å—Ç—è–º
        
        # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        try:
            # –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            if progress_callback:
                await progress_callback(f"üì§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ ({file_size/(1024*1024):.1f} MB)...")
                
            # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            form = aiohttp.FormData()
            form.add_field('chat_id', str(chat_id))
            form.add_field('type', 'video')
            form.add_field('file_size', str(file_size))
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            for attempt in range(self.max_retries):
                try:
                    async with self.session.post(
                        f"{self.api_endpoint}/initUpload",
                        data=form
                    ) as response:
                        if response.status == 200:
                            response_data = await response.json()
                            if response_data.get('ok'):
                                upload_id = response_data.get('result', {}).get('upload_id')
                                if upload_id:
                                    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, upload_id: {upload_id}")
                                    break
                        
                        logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {response.status}")
                        
                        if attempt < self.max_retries - 1:
                            delay = await self._exponential_backoff(attempt)
                            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫...")
                            await asyncio.sleep(delay)
                        else:
                            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                            return False
                            
                except Exception as e:
                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                    if attempt < self.max_retries - 1:
                        delay = await self._exponential_backoff(attempt)
                        await asyncio.sleep(delay)
                    else:
                        raise
            
            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç—è–º
            async with aiofiles.open(video_path, 'rb') as f:
                chunk_number = 0
                total_chunks = (file_size + self.chunk_size - 1) // self.chunk_size
                
                while True:
                    chunk_data = await f.read(self.chunk_size)
                    if not chunk_data:
                        break
                        
                    chunk_number += 1
                    progress = (chunk_number / total_chunks) * 100
                    
                    if progress_callback:
                        await progress_callback(
                            f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {chunk_number}/{total_chunks} ({progress:.1f}%)"
                        )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    success = await self._upload_chunk(
                        upload_id, 
                        chunk_number, 
                        chunk_data
                    )
                    
                    if not success:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç—å {chunk_number}")
                        return False
            
            # –®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if progress_callback:
                await progress_callback("üì§ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")
                
            form = aiohttp.FormData()
            form.add_field('upload_id', upload_id)
            form.add_field('chat_id', str(chat_id))
            if caption:
                form.add_field('caption', caption)
            
            # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(self.max_retries):
                try:
                    async with self.session.post(
                        f"{self.api_endpoint}/finalizeUpload",
                        data=form
                    ) as response:
                        if response.status == 200:
                            response_data = await response.json()
                            if response_data.get('ok'):
                                logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                return True
                        
                        logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {response.status}")
                        
                        if attempt < self.max_retries - 1:
                            delay = await self._exponential_backoff(attempt)
                            await asyncio.sleep(delay)
                        else:
                            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
                            return False
                            
                except Exception as e:
                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                    if attempt < self.max_retries - 1:
                        delay = await self._exponential_backoff(attempt)
                        await asyncio.sleep(delay)
                    else:
                        raise
            
            return False  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return False
            
    async def stream_video_to_telegram(self, chat_id: int, video_path: str, caption: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫, –Ω–µ –∑–∞–≥—Ä—É–∂–∞—è –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –ø–∞–º—è—Ç—å"""
        try:
            if not os.path.exists(video_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
                return False
                
            file_size = os.path.getsize(video_path)
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ {os.path.basename(video_path)} ({file_size/(1024*1024):.2f} MB)")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            if not self.session:
                connector = aiohttp.TCPConnector(force_close=True, limit=10)
                timeout = aiohttp.ClientTimeout(total=600, connect=60, sock_read=300, sock_connect=60)
                self.session = aiohttp.ClientSession(
                    connector=connector,
                    timeout=timeout
                )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º StreamReader –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            form = aiohttp.FormData()
            form.add_field('chat_id', str(chat_id))
            if caption:
                form.add_field('caption', caption)
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –ø–æ—Ç–æ–∫, –Ω–µ —á–∏—Ç–∞—è –µ–≥–æ –≤ –ø–∞–º—è—Ç—å
            with open(video_path, 'rb') as file:
                form.add_field('video', 
                    file, 
                    filename=os.path.basename(video_path),
                    content_type='video/mp4'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                async with self.session.post(
                    f"{self.api_endpoint}/sendVideo", 
                    data=form,
                    timeout=aiohttp.ClientTimeout(total=600)
                ) as response:
                    if response.status == 200:
                        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        return True
                    else:
                        response_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response.status}, {response_text}")
                        return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return False

    async def _upload_chunk(self, upload_id: str, chunk_number: int, chunk_data: bytes) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞"""
        for attempt in range(self.max_retries):
            try:
                form = aiohttp.FormData()
                form.add_field('upload_id', upload_id)
                form.add_field('chunk_number', str(chunk_number))
                form.add_field('data', chunk_data)
                
                async with self.session.post(
                    f"{self.api_endpoint}/uploadChunk",
                    data=form
                ) as response:
                    if response.status == 200:
                        response_data = await response.json()
                        if response_data.get('ok'):
                            logger.info(f"–ß–∞—Å—Ç—å {chunk_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                            return True
                    
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ {chunk_number} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {response.status}")
                    
                    if attempt < self.max_retries - 1:
                        delay = await self._exponential_backoff(attempt)
                        await asyncio.sleep(delay)
                    else:
                        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —á–∞—Å—Ç–∏ {chunk_number}")
                        return False
                        
            except Exception as e:
                logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å—Ç–∏ {chunk_number} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                if attempt < self.max_retries - 1:
                    delay = await self._exponential_backoff(attempt)
                    await asyncio.sleep(delay)
                else:
                    return False
                    
        return False