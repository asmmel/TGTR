import re
import json
import time
import requests
import logging
import os
import asyncio
from typing import Optional, Dict, Tuple, Any
from datetime import datetime
from config.config import setup_logging
from services.base_downloader import BaseDownloader

logger = setup_logging(__name__)

class InstagramDownloader(BaseDownloader):
    """Instagram Downloader —Å –ü–†–û–í–ï–†–ï–ù–ù–´–ú–ò —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, downloads_dir="downloads"):
        super().__init__(downloads_dir)
        
        # –†–ï–ê–õ–¨–ù–´–ï —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò!)
        self.working_proxies = [
            "posledtp52:TiCBNGs8sq@63.125.90.106:50100",
            "posledtp52:TiCBNGs8sq@72.9.186.194:50100", 
            "posledtp52:TiCBNGs8sq@5.133.163.38:50100"
        ]
        
        self.current_proxy_index = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏
        self.api_session = None
        self.download_session = None
        self._init_sessions()
        
        logger.info("‚úÖ InstagramDownloader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∫—Å–∏")
    
    def _init_sessions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        # API —Å–µ—Å—Å–∏—è —Å –ø—Ä–æ–∫—Å–∏
        self.api_session = requests.Session()
        self._setup_proxy_session()
        
        # –°–µ—Å—Å–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ë–ï–ó –ø—Ä–æ–∫—Å–∏
        self.download_session = requests.Session()
        self.download_session.headers.update({
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Accept": "video/webm,video/ogg,video/*;q=0.9,*/*;q=0.5",
            "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
        })
        
        logger.info("üîß –°–µ—Å—Å–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _setup_proxy_session(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è API —Å–µ—Å—Å–∏–∏ —Å –ü–†–û–í–ï–†–ö–û–ô"""
        if not self.working_proxies:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
            return
        
        proxy_string = self.working_proxies[self.current_proxy_index]
        proxy_url = f"http://{proxy_string}"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
        self.api_session.proxies = {
            'http': proxy_url,
            'https': proxy_url
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Instagram API
        self.api_session.headers.update({
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Sec-Fetch-User": "?1",
            "Cache-Control": "max-age=0"
        })
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –†–ï–ê–õ–¨–ù–û —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_string}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            test_response = self.api_session.get(
                'https://httpbin.org/ip', 
                timeout=15,
                allow_redirects=True
            )
            
            if test_response.status_code == 200:
                response_data = test_response.json()
                proxy_ip = response_data.get('origin', 'unknown')
                logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ #{self.current_proxy_index + 1} —Ä–∞–±–æ—Ç–∞–µ—Ç! IP: {proxy_ip}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ–º –ª–∏ –º—ã –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ Instagram
                try:
                    ig_test = self.api_session.get(
                        'https://www.instagram.com/',
                        timeout=10,
                        allow_redirects=True
                    )
                    if ig_test.status_code == 200:
                        logger.info("‚úÖ Instagram –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏")
                    else:
                        logger.warning(f"‚ö†Ô∏è Instagram –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {ig_test.status_code} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
                    
            else:
                logger.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç–∞—Ç—É—Å: {test_response.status_code}")
                self._rotate_proxy()
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            self._rotate_proxy()
    
    def _rotate_proxy(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
        if not self.working_proxies:
            return
            
        old_index = self.current_proxy_index
        self.current_proxy_index = (self.current_proxy_index + 1) % len(self.working_proxies)
        
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è —Å –ø—Ä–æ–∫—Å–∏ #{old_index + 1} –Ω–∞ #{self.current_proxy_index + 1}")
        self._setup_proxy_session()
    
    def extract_shortcode(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ shortcode –∏–∑ URL Instagram"""
        patterns = [
            r'/p/([A-Za-z0-9_-]+)/',     # Posts
            r'/reel/([A-Za-z0-9_-]+)/',  # Reels
            r'/tv/([A-Za-z0-9_-]+)/',    # IGTV
            r'/([A-Za-z0-9_-]+)/?$'      # Direct shortcode
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        return None
    
    async def get_page_content_via_proxy(self, shortcode: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        url = f"https://www.instagram.com/reel/{shortcode}/"
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        for attempt in range(len(self.working_proxies)):
            try:
                logger.info(f"üåê –ó–∞–ø—Ä–æ—Å –∫ {url} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ #{self.current_proxy_index + 1} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                response = self.api_session.get(
                    url,
                    timeout=20,
                    allow_redirects=True,
                    verify=True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL
                )
                
                logger.info(f"üìä –û—Ç–≤–µ—Ç: {response.status_code}, —Ä–∞–∑–º–µ—Ä: {len(response.text)} –±–∞–π—Ç")
                
                if response.status_code == 200:
                    if 'video_url' in response.text or 'videoUrl' in response.text:
                        logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã–µ –≤ HTML")
                        return response.text
                    else:
                        logger.warning("‚ö†Ô∏è HTML –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
                        
                elif response.status_code == 403:
                    logger.warning(f"‚ùå 403 Forbidden —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ #{self.current_proxy_index + 1}")
                    self._rotate_proxy()
                    await asyncio.sleep(2)
                    continue
                    
                elif response.status_code == 429:
                    logger.warning(f"‚ùå 429 Rate Limit —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ #{self.current_proxy_index + 1}")
                    self._rotate_proxy()
                    await asyncio.sleep(5)
                    continue
                    
                else:
                    logger.warning(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    self._rotate_proxy()
                    await asyncio.sleep(2)
                    continue
                    
            except requests.exceptions.ProxyError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
                self._rotate_proxy()
                await asyncio.sleep(2)
                continue
                
            except requests.exceptions.Timeout as e:
                logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–∫—Å–∏: {e}")
                self._rotate_proxy()
                await asyncio.sleep(2)
                continue
                
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                self._rotate_proxy()
                await asyncio.sleep(2)
                continue
        
        logger.error("‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
        return None
    
    def extract_video_url_from_html(self, html_content: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –≤–∏–¥–µ–æ –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ URL
            patterns = [
                r'"video_url":"([^"]+)"',
                r'"videoUrl":"([^"]+)"',
                r'videoUrl":\s*"([^"]+)"',
                r'"src":"([^"]+\.mp4[^"]*)"',
                r'https://[^"]*\.cdninstagram\.com/[^"]*\.mp4[^"]*'
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, html_content)
                for match in matches:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    video_url = match.replace('\\u0026', '&').replace('\/', '/')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∏–¥–µ–æ URL
                    if '.mp4' in video_url and ('cdninstagram.com' in video_url or 'fbcdn.net' in video_url):
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω video_url: {video_url[:100]}...")
                        return video_url
            
            logger.warning("‚ùå video_url –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return None
    
    async def download_video_direct(self, video_url: str, output_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ë–ï–ó –ø—Ä–æ–∫—Å–∏"""
        try:
            logger.info(f"üì• –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ (–ë–ï–ó –ø—Ä–æ–∫—Å–∏)")
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Accept": "video/webm,video/ogg,video/*;q=0.9,*/*;q=0.5",
                "Referer": "https://www.instagram.com/",
                "Origin": "https://www.instagram.com"
            }
            
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –ë–ï–ó –ø—Ä–æ–∫—Å–∏
            response = self.download_session.get(
                video_url, 
                headers=headers, 
                stream=True, 
                timeout=60
            )
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {total_size / (1024*1024):.2f} MB")
            
            with open(output_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded / (1024*1024):.2f} MB")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    async def download_via_ytdlp(self, url: str, output_path: str) -> bool:
        """Fallback —á–µ—Ä–µ–∑ yt-dlp"""
        try:
            logger.info(f"üîÑ Fallback: yt-dlp")
            
            import yt_dlp
            
            ydl_opts = {
                'format': 'best[ext=mp4]/best',
                'outtmpl': output_path,
                'quiet': True,
                'no_warnings': True,
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è yt-dlp
            if self.working_proxies:
                proxy_string = self.working_proxies[self.current_proxy_index]
                ydl_opts['proxy'] = f"http://{proxy_string}"
                logger.info(f"yt-dlp –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏: {proxy_string}")
            
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                lambda: yt_dlp.YoutubeDL(ydl_opts).download([url])
            )
            
            if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                logger.info("‚úÖ yt-dlp —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª –≤–∏–¥–µ–æ")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {e}")
            return False
    
    async def extract_video_info(self, url: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        shortcode = self.extract_shortcode(url)
        return {
            'title': f'Instagram Video {shortcode}',
            'duration': 0,
            'thumbnail': '',
            'uploader': 'Instagram User',
            'formats': [],
            'is_live': False
        }
    
    async def download_video(self, url: str, output_path: str = None) -> Optional[str]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if not output_path:
            output_path = self.generate_output_filename("instagram")
        
        try:
            logger.info(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Instagram –≤–∏–¥–µ–æ: {url}")
            
            shortcode = self.extract_shortcode(url)
            if not shortcode:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å shortcode")
                return None
            
            # –ú–ï–¢–û–î 1: –ü–æ–ª—É—á–∞–µ–º HTML —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏, —Å–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
            html_content = await self.get_page_content_via_proxy(shortcode)
            if html_content:
                video_url = self.extract_video_url_from_html(html_content)
                if video_url:
                    success = await self.download_video_direct(video_url, output_path)
                    if success:
                        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ + –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
                        return output_path
            
            logger.warning("–ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º yt-dlp...")
            
            # –ú–ï–¢–û–î 2: yt-dlp —Å –ø—Ä–æ–∫—Å–∏
            success = await self.download_via_ytdlp(url, output_path)
            if success:
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ yt-dlp")
                return output_path
            
            logger.error("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            
            # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(output_path):
                try:
                    os.remove(output_path)
                except:
                    pass
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, 'api_session'):
                self.api_session.close()
            if hasattr(self, 'download_session'):
                self.download_session.close()
        except:
            pass