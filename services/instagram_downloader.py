import re
import json
import time
import requests
import logging
import os
import asyncio
from typing import Optional, Dict, Tuple, Any
from datetime import datetime
from config.config import setup_logging
from services.base_downloader import BaseDownloader

logger = setup_logging(__name__)

class InstagramDownloader(BaseDownloader):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è Instagram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ fallback –º–µ—Ç–æ–¥–∞–º–∏"""
    
    def __init__(self, downloads_dir="downloads"):
        super().__init__(downloads_dir)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        self.current_proxy_index = 0
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
        self.working_proxies = [
            "posledtp52:TiCBNGs8sq@63.125.90.106:50100",
            "posledtp52:TiCBNGs8sq@72.9.186.194:50100", 
            "posledtp52:TiCBNGs8sq@5.133.163.38:50100"
        ]
        
        # –°–µ—Å—Å–∏—è —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.api_session = requests.Session()
        
        # –°–µ—Å—Å–∏—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        self.download_session = requests.Session()
        self.download_session.headers.update({
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
            "Accept": "video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5",
            "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
        })
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
        self.setup_api_session_with_proxy()
        
        logger.info("InstagramDownloader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
    
    def setup_api_session_with_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            if self.working_proxies:
                proxy_string = self.working_proxies[self.current_proxy_index]
                proxy_url = f"http://{proxy_string}"
                
                proxy_config = {
                    'http': proxy_url,
                    'https': proxy_url
                }
                
                self.api_session.proxies.update(proxy_config)
                self.api_session.headers.update({
                    "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
                    "Accept": "*/*",
                    "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
                })
                
                logger.info(f"API —Å–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏: {proxy_string}")
            else:
                logger.warning("–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è API")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è API")
    
    def rotate_proxy(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
        if self.working_proxies:
            self.current_proxy_index = (self.current_proxy_index + 1) % len(self.working_proxies)
            self.setup_api_session_with_proxy()
            logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–∫—Å–∏ #{self.current_proxy_index + 1}")
    
    def extract_shortcode(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ shortcode –∏–∑ URL Instagram"""
        patterns = [
            r'/p/([A-Za-z0-9_-]+)/',     # Posts
            r'/reel/([A-Za-z0-9_-]+)/',  # Reels
            r'/tv/([A-Za-z0-9_-]+)/',    # IGTV
            r'/([A-Za-z0-9_-]+)/?$'      # Direct shortcode
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        return None
    
    async def fallback_to_ytdlp(self, url: str, output_path: str) -> bool:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ yt-dlp (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!)"""
        try:
            logger.info(f"üîÑ Fallback: –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ yt-dlp: {url}")
            
            import yt_dlp
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Instagram
            ydl_opts = {
                'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
                'outtmpl': output_path,
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'no_color': True,
                'merge_output_format': 'mp4',
                'prefer_ffmpeg': True,
                'retries': 5,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                'fragment_retries': 5,
                'skip_unavailable_fragments': True,
                'http_headers': {
                    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15'
                }
            }
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                lambda: yt_dlp.YoutubeDL(ydl_opts).download([url])
            )
            
            if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ yt-dlp: {output_path}")
                return True
            else:
                logger.error("‚ùå yt-dlp –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ yt-dlp: {e}")
            return False
    
    async def try_instagram_api_method(self, url: str, output_path: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Instagram API (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)"""
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Instagram API: {url}")
            
            shortcode = self.extract_shortcode(url)
            if not shortcode:
                return False
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            for attempt in range(3):
                try:
                    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    post_url = f"https://www.instagram.com/reel/{shortcode}/"
                    response = self.api_session.get(post_url, timeout=15)
                    
                    if response.status_code == 200:
                        # –ò—â–µ–º video_url –≤ HTML
                        content = response.text
                        video_pattern = r'"video_url":"([^"]+)"'
                        match = re.search(video_pattern, content)
                        
                        if match:
                            video_url = match.group(1).replace('\\u0026', '&')
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω video_url –≤ HTML: {video_url[:100]}...")
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                            success = await self.download_video_direct(video_url, output_path)
                            if success:
                                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Instagram API")
                                return True
                    
                    elif response.status_code == 403:
                        logger.warning(f"403 –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                        self.rotate_proxy()
                        await asyncio.sleep(2)
                        continue
                    
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt < 2:
                        self.rotate_proxy()
                        await asyncio.sleep(2)
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Instagram API –º–µ—Ç–æ–¥–∞: {e}")
            return False
    
    async def download_video_direct(self, url: str, output_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)"""
        try:
            logger.info(f"üì• –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: {url[:100]}...")
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                "Accept": "video/webm,video/ogg,video/*;q=0.9,*/*;q=0.5",
                "Accept-Language": "en-US,en;q=0.9",
                "Referer": "https://www.instagram.com/",
                "Origin": "https://www.instagram.com"
            }
            
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ë–ï–ó –ø—Ä–æ–∫—Å–∏
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: self.download_session.get(url, headers=headers, stream=True, timeout=60)
            )
            
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded_size = 0
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {output_path}")
            if total_size > 0:
                logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_size / (1024*1024):.2f} MB")
            
            with open(output_path, 'wb') as file:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        file.write(chunk)
                        downloaded_size += len(chunk)
            
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded_size / (1024*1024):.2f} MB")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    async def extract_video_info(self, url: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        try:
            shortcode = self.extract_shortcode(url)
            return {
                'title': f'Instagram Video {shortcode}',
                'duration': 0,
                'thumbnail': '',
                'uploader': 'Instagram User',
                'formats': [],
                'is_live': False
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    async def download_video(self, url: str, output_path: str = None) -> Optional[str]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ —Ä–∞–±–æ—á–∏–µ –º–µ—Ç–æ–¥—ã"""
        if not output_path:
            output_path = self.generate_output_filename("instagram")
        
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É Instagram –≤–∏–¥–µ–æ: {url}")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 1: yt-dlp (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ª–æ–≥–∞–º!)
            success = await self.fallback_to_ytdlp(url, output_path)
            if success and os.path.exists(output_path):
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ yt-dlp: {output_path}")
                return output_path
            
            logger.warning("yt-dlp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Instagram API...")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢ 2: Instagram API (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
            success = await self.try_instagram_api_method(url, output_path)
            if success and os.path.exists(output_path):
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Instagram API: {output_path}")
                return output_path
            
            # –ï—Å–ª–∏ –≤—Å—ë –Ω–µ —É–¥–∞–ª–æ—Å—å
            logger.error(f"‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –¥–ª—è: {url}")
            
            # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(output_path):
                try:
                    os.remove(output_path)
                except:
                    pass
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            
            # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(output_path):
                try:
                    os.remove(output_path)
                except:
                    pass
            
            return None
    
    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, 'api_session'):
                self.api_session.close()
            if hasattr(self, 'download_session'):
                self.download_session.close()
        except:
            pass