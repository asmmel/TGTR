import os
import subprocess
import logging
import asyncio
from typing import Optional
from datetime import datetime
from config.config import setup_logging

logger = setup_logging(__name__)

class VideoSpeedService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg"""
    
    def __init__(self, downloads_dir="downloads"):
        self.downloads_dir = downloads_dir
        os.makedirs(downloads_dir, exist_ok=True)
    
    async def speed_up_video(
        self, 
        input_path: str, 
        speed_coefficient: int,
        pitch_shift: float = -0.5,
        keep_original: bool = False
    ) -> Optional[str]:
        """
        –£—Å–∫–æ—Ä—è–µ—Ç –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg
        """
        # –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú –ü–£–¢–¨ –î–õ–Ø –¢–ï–ö–£–©–ï–ô –û–°
        input_path = os.path.normpath(input_path)
        
        # –î–û–ë–ê–í–¨ –≠–¢–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
        logger.info(f"=" * 60)
        logger.info(f"üîç –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û")
        logger.info(f"üìÅ –í—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å (–ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏): {input_path}")
        logger.info(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(input_path)}")
        
        if os.path.exists(input_path):
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(input_path) / (1024*1024):.2f} MB")
            logger.info(f"üìù –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(input_path)}")
        else:
            # –ü–†–û–í–ï–†–Ø–ï–ú –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ü–£–¢–ò
            logger.error(f"‚ùå –§–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {input_path}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            possible_paths = [
                input_path,
                os.path.abspath(input_path),
                os.path.join(os.getcwd(), input_path),
                os.path.join("downloads", os.path.basename(input_path)),
                os.path.join(self.downloads_dir, os.path.basename(input_path))
            ]
            
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏:")
            for path in possible_paths:
                exists = os.path.exists(path)
                logger.info(f"  {'‚úÖ' if exists else '‚ùå'} {path}")
                if exists:
                    logger.info(f"üéØ –§–ê–ô–õ –ù–ê–ô–î–ï–ù! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å: {path}")
                    input_path = path
                    break
            else:
                logger.error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø—É—Ç–µ–π!")
                return None
        
        logger.info(f"=" * 60)
        
        if not 1 <= speed_coefficient <= 10:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {speed_coefficient}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 1-10 –≤ 1.01-1.10
        speed_factor = 1.0 + (speed_coefficient / 100)
        
        try:
            file_dir = os.path.dirname(input_path)
            file_name = os.path.basename(input_path)
            name, ext = os.path.splitext(file_name)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not file_dir or file_dir == '.':
                file_dir = os.path.abspath(self.downloads_dir)
            
            output_path = os.path.join(
                file_dir, 
                f"{name}_speed{speed_coefficient}x_{timestamp}{ext}"
            )
            
            logger.info(f"üì§ –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {output_path}")
            logger.info(f"‚ö° –£—Å–∫–æ—Ä—è–µ–º –≤–∏–¥–µ–æ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º {speed_factor}x...")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞
            pitch_ratio = 2 ** (pitch_shift / 12)
            new_sample_rate = int(48000 * pitch_ratio)
            
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ü–£–¢–ò –¥–ª—è FFmpeg
            abs_input_path = os.path.abspath(input_path)
            abs_output_path = os.path.abspath(output_path)
            
            logger.info(f"üé¨ FFmpeg –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {abs_input_path}")
            logger.info(f"üé¨ FFmpeg –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {abs_output_path}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg
            cmd = [
                'ffmpeg',
                '-i', abs_input_path,  # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–£–¢–¨
                '-filter_complex',
                f'[0:v]setpts=PTS/{speed_factor}[v];'
                f'[0:a]asetrate={new_sample_rate},aresample=48000,atempo={speed_factor}[a]',
                '-map', '[v]',
                '-map', '[a]',
                '-c:v', 'libx264',
                '-preset', 'medium',
                '-crf', '23',
                '-c:a', 'aac',
                '-b:a', '192k',
                '-y',
                abs_output_path  # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–£–¢–¨
            ]
            
            logger.info(f"üé¨ –ö–æ–º–∞–Ω–¥–∞ FFmpeg: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                if os.path.exists(abs_output_path):
                    file_size = os.path.getsize(abs_output_path) / (1024 * 1024)
                    logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–∫–æ—Ä–µ–Ω–æ: {abs_output_path} ({file_size:.2f} MB)")
                    
                    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
                    if not keep_original and abs_input_path != abs_output_path:
                        try:
                            os.remove(abs_input_path)
                            logger.info(f"üóë –£–¥–∞–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {abs_input_path}")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª: {e}")
                    
                    return abs_output_path  # –í–û–ó–í–†–ê–©–ê–ï–ú –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–£–¢–¨
                else:
                    logger.error(f"‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    return None
            else:
                error_msg = stderr.decode('utf-8') if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                logger.error(f"‚ùå FFmpeg –æ—à–∏–±–∫–∞:\n{error_msg}")
                return None
                
        except asyncio.TimeoutError:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
            return None
    
    async def get_video_info(self, video_path: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffprobe"""
        try:
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_format',
                '-show_streams',
                video_path
            ]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, _ = await process.communicate()
            
            if process.returncode == 0:
                import json
                info = json.loads(stdout.decode('utf-8'))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                duration = float(info.get('format', {}).get('duration', 0))
                size = int(info.get('format', {}).get('size', 0))
                
                return {
                    'duration': duration,
                    'size_mb': size / (1024 * 1024),
                    'format': info.get('format', {}).get('format_name', 'unknown')
                }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return None